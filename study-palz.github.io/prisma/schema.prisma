// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // for local development
  // url       = env("DATABASE_URL")
  // for Vercel
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  USER
  ADMIN
}

enum SessionStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

model User {
  id                   Int             @id @default(autoincrement())
  email                String          @unique
  password             String
  role                 Role            @default(USER)
  name                 String?
  profilePicture       String?

  // courses the user teaches or needs help in
  courseRoles          CourseRole[]

  // study sessions
  sessionsHosted       StudySession[]  @relation("OwnerSessions")
  sessionsAttending    StudySession[]  @relation("AttendeeSessions")

  // points
  points               Int             @default(0)
  pointHistory         PointHistory[]

  // password reset
  resetToken           String?         @unique
  resetTokenExpiresAt  DateTime?

  // one-to-one profile metadata
  userProfile          UserProfile?    @relation("UserProfileRelation")
}

model Course {
  id             Int            @id @default(autoincrement())
  code           String         @unique
  title          String

  // who can teach or needs help
  roles          CourseRole[]

  // sessions under this course
  studySessions  StudySession[]
}

model CourseRole {
  id         Int     @id @default(autoincrement())
  user       User    @relation(fields: [userId], references: [id])
  userId     Int
  course     Course  @relation(fields: [courseId], references: [id])
  courseId   Int
  isSensei   Boolean

  @@unique([userId, courseId, isSensei])
}

model StudySession {
  id          Int           @id @default(autoincrement())
  topic       String
  description String?
  owner       User          @relation("OwnerSessions", fields: [ownerId], references: [id])
  ownerId     Int

  course      Course        @relation(fields: [courseId], references: [id])
  courseId    Int

  status      SessionStatus @default(PENDING)
  startTime   DateTime
  endTime     DateTime

  attendees   User[]        @relation("AttendeeSessions")
}

model PointHistory {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  points      Int
  description String?
  createdAt   DateTime @default(now())
}

model UserProfile {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique
  firstName     String?
  lastName      String?
  profileImage  String?
  coursesTaken  String?
  coursesHelped String?
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())

  user          User     @relation("UserProfileRelation", fields: [userId], references: [id])
}
