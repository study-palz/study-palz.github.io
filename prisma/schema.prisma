// Prisma schema for Studymate application

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // for local development
  // url      = env("DATABASE_URL")
  // for Vercel
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Enum for user roles: 'USER' or 'ADMIN'
enum Role {
  USER
  ADMIN
}

// User model representing each ICS student
model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique
  password          String
  role              Role           @default(USER)
  name              String?
  profilePicture    String?
  courses           Course[]       @relation("UserCourses") // ← match the relation name
  points            Int            @default(0)
  pointHistory      PointHistory[]
  sessionsHosted    StudySession[] @relation("OwnerSessions")
  sessionsAttending StudySession[] @relation("AttendeeSessions")
}

// Model for courses available in the system
model Course {
  id            Int            @id @default(autoincrement())
  name          String
  users         User[]         @relation("UserCourses") // ← back-reference to User
  studySessions StudySession[] // ← back-reference to StudySession
}

// Model to represent study sessions that users can host or attend
model StudySession {
  id          Int           @id @default(autoincrement())
  topic       String
  description String?
  ownerId     Int
  owner       User          @relation("OwnerSessions", fields: [ownerId], references: [id])
  courseId    Int
  course      Course        @relation(fields: [courseId], references: [id])
  status      SessionStatus @default(PENDING)
  startTime   DateTime
  endTime     DateTime
  attendees   User[]        @relation("AttendeeSessions")
}

enum SessionStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

// Points history to track rewards earned by users for participating in study sessions
model PointHistory {
  id          Int      @id @default(autoincrement()) // Automatically increments for new points record
  userId      Int // User ID who earned the points
  user        User     @relation(fields: [userId], references: [id]) // Relation to the User
  points      Int // Number of points earned
  description String? // Description of how the points were earned
  createdAt   DateTime @default(now()) // Automatically set when the points are earned
}
